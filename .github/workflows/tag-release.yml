name: CI on Push to Main

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/

      - name: Create ZIP source code archive
        run: |
          zip -r ../sourceCode.zip . -x "node_modules/*" -x "build"

      - name: Create TAR.GZ source code archive
        run: |
          tar -czvf ../sourceCode.tar.gz --exclude="node_modules" --exclude="build" -C . .

      - name: Create ZIP build archive
        run: |
          zip -r ../build.zip ./build

      - name: Create TAR.GZ build archive
        run: |
          tar -czvf ../build.tar.gz -C ./build .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Upload ZIP Source Code artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ../sourceCode.zip
          asset_name: sourceCode.zip
          asset_content_type: application/zip

      - name: Upload TAR.GZ Source Code artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ../sourceCode.tar.gz
          asset_name: sourceCode.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload ZIP build artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ../build.zip
          asset_name: build.zip
          asset_content_type: application/zip

      - name: Upload TAR.GZ build artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ../build.tar.gz
          asset_name: build.tar.gz
          asset_content_type: application/x-gtar
    
      - name: Successfully create release
        run: | 
          echo "Release created successfully"
          echo "Please now write the release documentation at this link: ${{ steps.create_release.outputs.upload_url }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./build

      - name: Add remote server to known hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to pre-production server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          echo -e $SSH_PRIVATE_KEY > sshkey
          chmod -R 400 sshkey
          scp -o StrictHostKeyChecking=no -i sshkey -r ./build/* $SERVER_USER@$SERVER_IP:$DEPLOY_PATH